

===   [ 收集测试用例 ]  === 


== cases\调试用.py 

打开浏览器

** no cases in this file, skip it.

== cases\空环境\__st__.py 


== cases\空环境\空环境.py 


== cases\空环境\七年级1班\__st__.py 


== cases\空环境\七年级1班\七年级1班.py 


== cases\空环境\七年级1班\阿茂教师\__st__.py 


== cases\空环境\七年级1班\阿茂教师\阿茂教师.py 


== cases\空环境\七年级1班\阿茂教师\阿茂学生\__st__.py 


== cases\空环境\七年级1班\阿茂教师\阿茂学生\阿茂学生.py 



===   [ 执行测试用例 ]  === 

预备执行用例数量 : 20



  ========= 测试开始 : 20240601_045513 =========



>>> cases\空环境\

[ suite setup ] cases\空环境\
开始执行目录初始化：系统中没有教师
开始执行目录初始化：系统中没有班级


>>> cases\空环境\空环境.py

* 班级API_添加班级1 - tc000001  -  2024-06-01 04:55:14

  [ case execution steps ]

-- 第 1 步 -- 发送添加班级请求,并获取新增班级的邀请码与id 


** 检查点 **  检查是否创建成功 ---->  通过


-- 第 2 步 -- 发送列出班级请求 


** 检查点 **  对比列出请求的返回消息是否和第一步相同 ---->  通过

  PASS 

[ case teardown ] 班级API_添加班级1 - tc000001
开始执行清除：删除用例中新增的班级

* 修改班级API_修改班级3 - tc000054  -  2024-06-01 04:55:14

  [ case execution steps ]

-- 第 1 步 -- 在空环境中调用修改班级API，classID为不存在的班级ID 

实际返回结果：{'reason': 'id 为`123456789`的班级不存在', 'retcode': 404}
预期返回结果：{'retcode': 404, 'reason': 'id 为`123456789`的班级不存在'}

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 


>>> cases\空环境\七年级1班\

[ suite setup ] cases\空环境\七年级1班\
开始执行目录初始化：系统中已有班级（七年级1班）


>>> cases\空环境\七年级1班\七年级1班.py

* 班级API_添加班级2 - tc000002  -  2024-06-01 04:55:14

  [ case execution steps ]

-- 第 1 步 -- 调用创建班级API，创建一个系统中不存在同年级的同名班级 


** 检查点 **  检查创建API返回信息 ---->  通过


-- 第 2 步 -- 调用列出班级API 


** 检查点 **  检查返回结果是否包含STEP1中创建的信息 ---->  通过

  PASS 

[ case teardown ] 班级API_添加班级2 - tc000002
开始执行用例清除操作：删除用例中创建的班级

* 班级API_添加班级3 - tc000003  -  2024-06-01 04:55:15

[ case setup ] 班级API_添加班级3 - tc000003
执行用例级初始化操作：调用列出班级API，获取已有班级信息
[{'name': '七年级1班', 'grade__name': '七年级', 'invitecode': '202759191940', 'studentlimit': 80, 'studentnumber': 0, 'id': 20275, 'teacherlist': []}]

  [ case execution steps ]

-- 第 1 步 -- 调用创建班级API，创建一个已存在同年级的同名班级 

实际返回的结果：{'reason': 'Traceback (most recent call last):\n  File "/home/yjyx/yijiao_src/yijiao_main/services/datamodel/schoolclass/models.py", line 542, in addClass\n    school_class = self._addClass(name,schoolid,gradeid,studentlimit)\n  File "/home/yjyx/yijiao_src/yijiao_main/services/datamodel/schoolclass/models.py", line 531, in _addClass\n    school_class.save()\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 710, in save\n    force_update=force_update, update_fields=update_fields)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 738, in save_base\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 822, in _save_table\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 861, in _do_insert\n    using=using, raw=raw)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/manager.py", line 127, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/query.py", line 920, in _insert\n    return query.get_compiler(using=using).execute_sql(return_id)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/sql/compiler.py", line 974, in execute_sql\n    cursor.execute(sql, params)\n  File "/usr/local/lib/python2.7/site-packages/django/db/backends/utils.py", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File "/usr/local/lib/python2.7/site-packages/django/db/utils.py", line 97, in __exit__\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\n  File "/usr/local/lib/python2.7/site-packages/django/db/backends/utils.py", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File "/usr/local/lib/python2.7/site-packages/django/db/backends/mysql/base.py", line 124, in execute\n    return self.cursor.execute(query, args)\n  File "/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py", line 205, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nIntegrityError: (1062, "Duplicate entry \'\\xe4\\xb8\\x83\\xe5\\xb9\\xb4\\xe7\\xba\\xa71\\xe7\\x8f\\xad-407-1\' for key \'name\'")\n', 'retcode': 1}
预期返回的结果：{'retcode': 1, 'reason': 'duplicated class name'}

** 检查点 **  检查返回结果是否为失败，消息体内容是否符合预期 ---->  !! 不通过!!

  FAIL    
Traceback:
  File "cases\空环境\七年级1班\七年级1班.py", line 67, in teststeps
    CHECK_POINT('检查返回结果是否为失败，消息体内容是否符合预期', retlist1 == exceptlist1)
  File "E:\BYHY项目实战\YJYX_API\pythonProject\.venv2\lib\site-packages\hytest\common.py", line 76, in CHECK_POINT
    raise AssertionError()
AssertionError


* 班级API_修改班级1 - tc000051  -  2024-06-01 04:55:15

  [ case execution steps ]

-- 第 1 步 -- 调用列出班级API，获取classid 


-- 第 2 步 -- 调用修改班级API，使班级名为新名字且无同名 


** 检查点 **  检查返回结果是否为0 ---->  通过


-- 第 3 步 -- 调用列出班级API 


** 检查点 **  检查返回结果中班级名是否修改 ---->  通过

  PASS 

[ case teardown ] 班级API_修改班级1 - tc000051
执行用例级清除操作：将数据环境还原(七年级2班改回1班)
{'retcode': 0}

* 班级API_修改班级2 - tc000052  -  2024-06-01 04:55:15

[ case setup ] 班级API_修改班级2 - tc000052
执行用例初始化操作1：调用列出班级API，获取修改前班级信息
执行用例级初始化操作2：新增一个班级，用于修改

  [ case execution steps ]

-- 第 1 步 -- 调用修改班级API，使班级名为一个新名字且和已有的班级同名 


-- 第 2 步 -- 检查返回结果是否符合预期 

预期返回的结果：{'retcode': 1, 'reason': 'duplicated class name'}
实际返回的结果：{'reason': '未知错误:Traceback (most recent call last):\n  File "/home/yjyx/yijiao_src/yijiao_main/services/datamodel/schoolclass/models.py", line 612, in modifyClass\n    school_class.save()\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 710, in save\n    force_update=force_update, update_fields=update_fields)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 738, in save_base\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 803, in _save_table\n    forced_update)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/base.py", line 853, in _do_update\n    return filtered._update(values) > 0\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/query.py", line 580, in _update\n    return query.get_compiler(self.db).execute_sql(CURSOR)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/sql/compiler.py", line 1062, in execute_sql\n    cursor = super(SQLUpdateCompiler, self).execute_sql(result_type)\n  File "/usr/local/lib/python2.7/site-packages/django/db/models/sql/compiler.py", line 840, in execute_sql\n    cursor.execute(sql, params)\n  File "/usr/local/lib/python2.7/site-packages/django/db/backends/utils.py", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File "/usr/local/lib/python2.7/site-packages/django/db/utils.py", line 97, in __exit__\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\n  File "/usr/local/lib/python2.7/site-packages/django/db/backends/utils.py", line 64, in execute\n    return self.cursor.execute(sql, params)\n  File "/usr/local/lib/python2.7/site-packages/django/db/backends/mysql/base.py", line 124, in execute\n    return self.cursor.execute(query, args)\n  File "/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py", line 205, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nIntegrityError: (1062, "Duplicate entry \'\\xe4\\xb8\\x83\\xe5\\xb9\\xb4\\xe7\\xba\\xa71\\xe7\\x8f\\xad-407-1\' for key \'name\'")\n', 'retcode': 10000}

** 检查点 **  检查返回结果 ---->  !! 不通过!!

  FAIL    
Traceback:
  File "cases\空环境\七年级1班\七年级1班.py", line 142, in teststeps
    CHECK_POINT('检查返回结果', r_STEP1 == exceptr)
  File "E:\BYHY项目实战\YJYX_API\pythonProject\.venv2\lib\site-packages\hytest\common.py", line 76, in CHECK_POINT
    raise AssertionError()
AssertionError


[ case teardown ] 班级API_修改班级2 - tc000052
执行用例级清除操作：删除初始化操作中新增的班级

* 修改班级API_修改班级3 - tc000053  -  2024-06-01 04:55:15

  [ case execution steps ]

-- 第 1 步 -- 调用修改班级API，classID为不存在的班级ID 

实际返回结果：{'reason': 'id 为`123456789`的班级不存在', 'retcode': 404}
预期返回结果：{'retcode': 404, 'reason': 'id 为`123456789`的班级不存在'}

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 

* 班级API_删除班级1 - tc000081  -  2024-06-01 04:55:15

  [ case execution steps ]

-- 第 1 步 -- 调用删除班级API，使用一个不存在的classID 

实际返回结果：{'reason': 'id 为`114514`的班级不存在', 'retcode': 404}
预期返回结果：{'retcode': 404, 'reason': 'id 为`114514`的班级不存在'}

** 检查点 **  检查返回消息是否符合预期 ---->  通过

  PASS 

* 班级API_删除班级2 - tc000082  -  2024-06-01 04:55:15

[ case setup ] 班级API_删除班级2 - tc000082
开始执行用例初始化操作：新增一个班级用于用例的删除

  [ case execution steps ]

-- 第 1 步 -- 调用删除班级API，使用已存在的classID 

预期返回的结果：{'retcode': 0}
实际返回的结果：{'retcode': 0}

** 检查点 **  检查返回结果是否符合预期 ---->  通过


-- 第 2 步 -- 调用列出班级API 

预期返回的结果：[20275]中不包含20279
实际返回的结果：[20275]

** 检查点 **  检查返回信息是否符合预期 ---->  通过

  PASS 

* 老师API_添加老师1 - tc001001  -  2024-06-01 04:55:15

[ case setup ] 老师API_添加老师1 - tc001001
执行初始化操作：获取已有班级的classID，再通过json.dump方法获取含classID的json字符串
[{'name': '七年级1班', 'grade__name': '七年级', 'invitecode': '202759191940', 'studentlimit': 80, 'studentnumber': 0, 'id': 20275, 'teacherlist': []}]

  [ case execution steps ]

-- 第 1 步 -- 调用创建老师API，学科ID为1 

{'retcode': 0, 'id': 5229}
实际的返回结果是：0
预期的返回结果是：0

** 检查点 **  检查返回结果是否成功创建 ---->  通过


-- 第 2 步 -- 调用列出老师API 

实际的返回结果是：[{'username': '老师001001', 'teachclasslist': [20275], 'realname': '老师001001', 'id': 5229, 'phonenumber': '123456789', 'email': 'tc001001@123.com', 'idcardnumber': '100102100312120311'}]
预期的返回结果是：[{'username': '老师001001', 'teachclasslist': [20275], 'realname': '老师001001', 'id': 5229, 'phonenumber': '123456789', 'email': 'tc001001@123.com', 'idcardnumber': '100102100312120311'}]

** 检查点 **  检查返回结果是否与第一步信息相同 ---->  通过

  PASS 

[ case teardown ] 老师API_添加老师1 - tc001001
执行清除操作：删除用例中新建的教师

* WebUI_老师登陆 - tc005001  -  2024-06-01 04:55:15

[ case setup ] WebUI_老师登陆 - tc005001
开始执行用例初始化操作：调用列出班级API，获取classlist

  [ case execution steps ]

-- 第 1 步 -- 调用创建老师API 

创建老师API实际返回的结果：{'retcode': 0, 'id': 5230}

-- 第 2 步 -- 以STEP1中的账号登陆Web系统 

打开浏览器

-- 第 3 步 -- 获取首页各项信息 

预期的结果是：{'学校名称': '白月学院00002', '姓名': 'tc005001', '学科': '初中数学', '金币': '0', '微课': '0', '作业': '0'}
实际的结果是：{'学校名称': '白月学院00002', '姓名': 'tc005001', '学科': '初中数学', '金币': '0', '微课': '0', '作业': '0'}

** 检查点 **  检查结果是否正确 ---->  通过


-- 第 4 步 -- 点击班级学生菜单 

  ABORT   Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[1]/div[2]/a"}
  (Session info: chrome=125.0.6422.113)
 
Traceback:
  File "cases\空环境\七年级1班\七年级1班.py", line 357, in teststeps
    wd.find_element(By.XPATH,'//div[1]/div[2]/a').click() # 点击列表中第一行班级
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\selenium-3.141.0-py3.8.egg\selenium\webdriver\remote\webdriver.py", line 976, in find_element
    return self.execute(Command.FIND_ELEMENT, {
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\selenium-3.141.0-py3.8.egg\selenium\webdriver\remote\webdriver.py", line 321, in execute
    self.error_handler.check_response(response)
  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python38\lib\site-packages\selenium-3.141.0-py3.8.egg\selenium\webdriver\remote\errorhandler.py", line 242, in check_response
    raise exception_class(message, screen, stacktrace)
selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[1]/div[2]/a"}
  (Session info: chrome=125.0.6422.113)



[ case teardown ] WebUI_老师登陆 - tc005001
开始执行用例清除操作：删除用例中新建的老师
{'retcode': 0}


>>> cases\空环境\七年级1班\阿茂教师\

[ suite setup ] cases\空环境\七年级1班\阿茂教师\
开始执行目录初始化：系统中已经有老师


>>> cases\空环境\七年级1班\阿茂教师\阿茂教师.py

* 老师API_添加老师2 - tc001002  -  2024-06-01 04:55:32

[ case setup ] 老师API_添加老师2 - tc001002
执行初始化操作：新增一个班级，再通过json.dump方法获取含classID的json字符串

  [ case execution steps ]

-- 第 1 步 -- 调用创建老师API，创建1个系统中不存在同登录名的老师 


** 检查点 **  检查是否返回创建成功 ---->  通过


-- 第 2 步 -- 调用列出老师API,获取所有老师的ID并保存至空列表中 

预期的结果是：[{'username': '阿茂老师001002', 'teachclasslist': [20280], 'realname': '阿茂老师001002', 'id': 5232, 'phonenumber': '1234567891', 'email': 'amao001002@qq.com', 'idcardnumber': '411412555236633653'}]
实际的结果是：[{'username': '阿茂老师', 'teachclasslist': [20275], 'realname': '阿茂老师', 'id': 5231, 'phonenumber': '123456789', 'email': 'amao@qq.com', 'idcardnumber': '411412555236633652'}, {'username': '阿茂老师001002', 'teachclasslist': [20280], 'realname': '阿茂老师001002', 'id': 5232, 'phonenumber': '1234567891', 'email': 'amao001002@qq.com', 'idcardnumber': '411412555236633653'}]

** 检查点 **  检查STEP1中新建的老师信息是否存在 ---->  通过

  PASS 

[ case teardown ] 老师API_添加老师2 - tc001002
执行清除操作：删除用例中新建的教师
执行清除操作：删除初始化中新建的班级

* 老师API_添加老师3 - tc001003  -  2024-06-01 04:55:32

[ case setup ] 老师API_添加老师3 - tc001003
开始执行用例初始化操作：新建1个班级

  [ case execution steps ]

-- 第 1 步 -- 调用列出老师API，获取已有老师的ID及其用户名，用于后续检查点验证 


-- 第 2 步 -- 调用创建老师API，创建一个存在同登录名的老师 

预期返回的结果：{'retcode': 1, 'reason': '登录名 阿茂老师 已经存在'}
实际返回的结果：{'reason': '登录名 阿茂老师 已经存在', 'retcode': 1}

** 检查点 **  检查返回结果是否符合预期 ---->  通过


-- 第 3 步 -- 调用列出老师API 

预期返回的结果：{'retlist': [{'username': '阿茂老师', 'teachclasslist': [20275], 'realname': '阿茂老师', 'id': 5231, 'phonenumber': '123456789', 'email': 'amao@qq.com', 'idcardnumber': '411412555236633652'}], 'retcode': 0}
实际返回的结果：{'retlist': [{'username': '阿茂老师', 'teachclasslist': [20275], 'realname': '阿茂老师', 'id': 5231, 'phonenumber': '123456789', 'email': 'amao@qq.com', 'idcardnumber': '411412555236633652'}], 'retcode': 0}

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 

[ case teardown ] 老师API_添加老师3 - tc001003
开始执行用例清除操作：删除初始化操作中新建的班级

* 老师API_修改老师1 - tc001051  -  2024-06-01 04:55:32

  [ case execution steps ]

-- 第 1 步 -- 调用修改老师API，是url中的ID为一个不存在的老师ID 


-- 第 2 步 -- 检查返回结果是否符合预期 

预期返回的结果：{'retcode': 1, 'reason': 'id 为`123321`的老师不存在'}
实际返回的结果：{'reason': 'id 为`123321`的老师不存在', 'retcode': 1}

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 

* 老师API_修改老师2 - tc001052  -  2024-06-01 04:55:32

[ case setup ] 老师API_修改老师2 - tc001052
开始执行用例初始化操作：新增2个班级，用于用例中的修改操作
开始执行用例初始化操作：新增1个教师，用于用例中的修改操作

  [ case execution steps ]

-- 第 1 步 -- 调用修改老师API，同时修改真实名和授课班级，班级从1个班修改为2个班 

预期返回的结果：{'retcode': 0}
实际返回的结果：{'retcode': 0}

** 检查点 **  检查返回结果是否符合预期 ---->  通过


-- 第 2 步 -- 调用列出老师API 

realname预期包含的结果：阿茂老师001052
realname实际的结果：['阿茂老师', '阿茂老师001052']

** 检查点 **  检查返回结果中的realname字段 ---->  通过

teachclasslist预期包含的结果：[20282, 20283]
teachclasslist实际的结果：[[20275], [20282, 20283]]

** 检查点 **  检查返回结果中的teachclasslist字段 ---->  通过

  PASS 

[ case teardown ] 老师API_修改老师2 - tc001052
开始执行用例清除操作：删除初始化操作中新增的教师和班级

* 老师API_删除老师1 - tc001081  -  2024-06-01 04:55:33

  [ case execution steps ]

-- 第 1 步 -- 调用删除老师API，删除一个不存在的老师ID 


-- 第 2 步 -- 检查返回结果 

预期返回的结果：{'retcode': 404, 'reason': 'id 为`456123`的老师不存在'}
实际返回的结果：{'reason': 'id 为`456123`的老师不存在', 'retcode': 404}

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 

* 老师API_删除老师2 - tc001082  -  2024-06-01 04:55:33

[ case setup ] 老师API_删除老师2 - tc001082
开始执行用例初始化操作：新增1个班级
开始执行用例初始化操作：新增1个教师

  [ case execution steps ]

-- 第 1 步 -- 调用删除老师API，删除一个存在的老师ID 

预期的返回结果：{'retcode': 0}
实际的返回结果：{'retcode': 0}

** 检查点 **  检查返回结果： ---->  通过


-- 第 2 步 -- 调用列出老师API 

预期的返回结果不包含：5234
实际的返回结果：[5231]

** 检查点 **  检查返回结果 ---->  通过

  PASS 

[ case teardown ] 老师API_删除老师2 - tc001082
开始执行用例清除操作：删除初始化中新增的班级

* 学生API_添加学生1 - tc002001  -  2024-06-01 04:55:33

[ case setup ] 学生API_添加学生1 - tc002001
开始执行初始化操作：调用列出班级API，获取classid

  [ case execution steps ]

-- 第 1 步 -- 调用学生API，创建1个不存在同登录名的学生 

预期返回的结果：{'retcode': 0, 'id': 2122}
实际返回的结果：{'retcode': 0, 'id': 2122}

** 检查点 **  检查返回结果是否符合预期 ---->  通过


-- 第 2 步 -- 调用列出学生API 

预期返回的结果：[{'classid': 20275, 'realname': '阿茂学生2001', 'username': '阿茂学生2001', 'phonenumber': '123456789', 'id': 2122}]
实际返回的结果：[{'classid': 20275, 'realname': '阿茂学生2001', 'username': '阿茂学生2001', 'phonenumber': '123456789', 'id': 2122}]

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 

[ case teardown ] 学生API_添加学生1 - tc002001
开始执行清除操作：删除用例中新增的学生


>>> cases\空环境\七年级1班\阿茂教师\阿茂学生\

[ suite setup ] cases\空环境\七年级1班\阿茂教师\阿茂学生\
开始执行目录初始化操作：列出已有的班级，获取classid
开始执行目录初始化操作：新增1个学生，获取studentid


>>> cases\空环境\七年级1班\阿茂教师\阿茂学生\阿茂学生.py

* 学生API_添加学生2 - tc002002  -  2024-06-01 04:55:33

  [ case execution steps ]

-- 第 1 步 -- 调用列出班级API，获取classid 


-- 第 2 步 -- 调用创建学生API 

预期的返回结果：{'retcode': 0, 'id': 2124}
实际的返回结果：{'retcode': 0, 'id': 2124}

** 检查点 **  检查返回结果是否符合预期 ---->  通过


-- 第 3 步 -- 调用列出学生API 

预期的返回结果需包含：{'classid': 20275, 'realname': '阿茂学生2002', 'username': '阿茂学生2002', 'phonenumber': '1234562002', 'id': 2124}
实际的返回结果：[{'classid': 20275, 'realname': '阿茂学生', 'username': '阿茂学生', 'phonenumber': '13451813456', 'id': 2123}, {'classid': 20275, 'realname': '阿茂学生2002', 'username': '阿茂学生2002', 'phonenumber': '1234562002', 'id': 2124}]

** 检查点 **  检查返回结果是否符合预期 ---->  通过

  PASS 

[ case teardown ] 学生API_添加学生2 - tc002002
开始执行用例清除操作：删除用例中新建的学生

* 学生API_删除学生1 - tc002081  -  2024-06-01 04:55:33

[ case setup ] 学生API_删除学生1 - tc002081
开始执行初始化操作：新增一个学生用于删除

  [ case execution steps ]

-- 第 1 步 -- 调用删除学生API 

预期返回的结果：{'retcode': 0}
实际返回的结果：{'retcode': 0}

** 检查点 **  检查返回结果是否符合预期 ---->  通过


-- 第 2 步 -- 调用列出学生API 

预期返回结果中不应含有：2125
实际返回结果：[2123]

** 检查点 **  检查返回结果，不应包含已删除的学生 ---->  通过

  PASS 

[ suite teardown ] cases\空环境\七年级1班\阿茂教师\阿茂学生\
开始执行目录清除操作：删除初始化中新增的学生

[ suite teardown ] cases\空环境\七年级1班\阿茂教师\
开始执行目录清除：删除初始化操作中新建的老师

[ suite teardown ] cases\空环境\七年级1班\
开始执行目录清除：删除套件初始化中新建的班级

[ suite teardown ] cases\空环境\
开始执行目录清除：检查环境中是否存在教师，若有则删除
开始执行目录清除：检查环境中是否存在班级，若有则删除


  ========= 测试结束 : 20240601_045534 =========


  耗时    : 20.508 秒


  预备执行用例数量 : 20

  实际执行用例数量 : 20

  通过 : 17

  失败 : 2

  异常 : 1

  套件初始化失败 : 0

  套件清除  失败 : 0

  用例初始化失败 : 0

  用例清除  失败 : 0
